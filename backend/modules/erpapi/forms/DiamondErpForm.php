<?php

namespace backend\modules\erpapi\forms;


use common\enums\LanguageEnum;
use common\models\goods\Diamond;
use yii\web\UnprocessableEntityHttpException;

class DiamondErpForm extends Diamond
{
    public function beforeValidate()
    {
        foreach (\common\enums\DiamondEnum::getCertTypeList() as $key => $typeOption) {
            if ($this->cert_type == $typeOption) {
                $this->cert_type = (string)$key;
            }
        }

        foreach (\common\enums\DiamondEnum::getClarityList() as $key => $clarityOption) {
            if ($this->clarity == $clarityOption) {
                $this->clarity = (string)$key;
            }
        }

        foreach (\common\enums\DiamondEnum::getCutList() as $key => $cutOption) {
            if ($this->cut == $cutOption) {
                $this->cut = (string)$key;
            }
        }

        foreach (\common\enums\DiamondEnum::getColorList() as $key => $colorOption) {
            if ($this->color == $colorOption) {
                $this->color = (string)$key;
            }
        }

        foreach (\common\enums\DiamondEnum::getShapeList() as $key => $shapeOption) {
            if ($this->shape == $shapeOption) {
                $this->shape = $key;
            }
        }

        foreach (\common\enums\DiamondEnum::getSymmetryList() as $key => $symmetryOption) {
            if ($this->symmetry == $symmetryOption) {
                $this->symmetry = (string)$key;
            }
        }

        foreach (\common\enums\DiamondEnum::getPolishList() as $key => $polishOption) {
            if ($this->polish == $polishOption) {
                $this->polish = (string)$key;
            }
        }

        foreach (\common\enums\DiamondEnum::getFluorescenceList() as $key => $fluorescenceOption) {
            if ($this->fluorescence == $fluorescenceOption) {
                $this->fluorescence = $key;
            }
        }

        $this->fluorescence = (string)20;
        $this->sale_price = $this->sale_price != 0 ? $this->sale_price : 0.01;
        $this->market_price = $this->market_price != 0 ? $this->market_price : 0.01;
        $this->cost_price = $this->market_price != 0 ? $this->market_price : 0.01;
        $this->source_discount = 0;

        $this->created_at = time();
        $this->updated_at = time();

        $this->sale_policy = [
            "1" => [
                "area_id" => "1",
                "area_name" => "中国",
                "sale_price" => $this->sale_price,
                "markup_rate" => "1",
                "markup_value" => "0",
                "status" => "{$this->status}"
            ],
            "2" => [
                "area_id" => "2",
                "area_name" => "香港",
                "sale_price" => $this->sale_price,
                "markup_rate" => "1",
                "markup_value" => "0",
                "status" => "{$this->status}"
            ],
            "3" => [
                "area_id" => "3",
                "area_name" => "澳门",
                "sale_price" => $this->sale_price,
                "markup_rate" => "1",
                "markup_value" => "0",
                "status" => "{$this->status}"
            ],
            "4" => [
                "area_id" => "4",
                "area_name" => "台湾",
                "sale_price" => $this->sale_price,
                "markup_rate" => "1",
                "markup_value" => "0",
                "status" => "{$this->status}"
            ],
            "99" => [
                "area_id" => "99",
                "area_name" => "国外",
                "sale_price" => $this->sale_price,
                "markup_rate" => "1",
                "markup_value" => "0",
                "status" => "{$this->status}"
            ]
        ];

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $is_new = true;
        foreach ($this->langs as $langModel) {
            $langModel['goods_name'] = $this->getErpTitle();
            if (false === $langModel->save()) {
                throw new UnprocessableEntityHttpException('langModel 保存失败1');//$this->getError($langModel));
            }

            $is_new = false;
        }

        if ($is_new) {
            foreach (LanguageEnum::getMap() as $lang_key => $item) {
                $langModel = $this->langModel();
                $langModel->setAttributes([
                    'goods_name' => $this->getErpTitle(),
                    'goods_desc' => '',
                    'goods_body' => '',
                    'mobile_body' => '',
                    'meta_title' => '',
                    'meta_word' => '',
                    'meta_desc' => '',
                ]);

                $langModel->master_id = $this->id;
                $langModel->language = $lang_key;

                if (false === $langModel->save()) {
                    throw new UnprocessableEntityHttpException('langModel 保存失败2');//$this->getError($langModel));
                }
            }
        }
    }

    private function getErpTitle()
    {
        return $this->goods_name;
    }
}