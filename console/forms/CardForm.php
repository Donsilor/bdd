<?php

namespace console\forms;

use common\models\market\MarketCard;
use common\models\market\MarketCardGoodsType;
use services\goods\TypeService;
use Yii;
use yii\base\Model;

/**
 * Class CardForm
 * @package console\forms
 * @author jianyan74 <751393839@qq.com>
 */
class CardForm extends Model
{

    public $batch = null;
    public $sn = null;
    public $password = null;
    public $amount = null;
    public $start_time = null;
    public $end_time = null;
    public $goods_types = null;

    /**
     * @var bool
     */
    protected $status = true;

    public function rules()
    {
        return [
            [['batch','sn','password','amount','start_time','end_time','goods_types'], 'required'],
            [['amount'], 'integer'],
            [['goods_types'], 'validateGoodsTypes'],
            [['batch'], 'string', 'max' => 50],
            [['batch'], 'safe'],
            [['start_time','end_time'], 'date'],
            [['sn'], 'validateSn'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'batch' => '批次',
            'sn' => '卡号',
            'password' => '密码',
            'amount' => '金额',
            'start_time' => '开始时间',
            'end_time' => '结束时间',
            'goods_types' => '使用范围',
        ];
    }

    public function afterValidate()
    {
        $this->start_time = strtotime($this->start_time);
        $this->end_time = strtotime($this->end_time .' +1 day');
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function validateSn($attribute)
    {
        if(MarketCard::findOne(['sn'=>$this->sn])) {
            $this->addError($attribute, 'Sn 在数据库已存在');
        }
    }

    public function validateGoodsTypes($attribute)
    {
        if(MarketCardGoodsType::findOne(['batch'=>$this->batch])) {
            $this->addError($attribute, 'Batch 在数据库已存在');
        }

        static $batchByGoodsTypes = [];

        if(!isset($batchByGoodsTypes[$this->batch])) {
            $batchByGoodsTypes[$this->batch] = $this->goods_types;

            $goodsTypes = explode('|', $this->goods_types);
            foreach ($goodsTypes as $goodsType) {
                if(!in_array($goodsType, TypeService::getTypeList())) {
                    $this->addError($attribute, '产品线错误');
                }
            }
        }
        else if($batchByGoodsTypes[$this->batch] == $this->goods_types) {
            return true;
        }
        else {
            $this->addError($attribute, '产品线和批次对应不上');
        }
    }
}